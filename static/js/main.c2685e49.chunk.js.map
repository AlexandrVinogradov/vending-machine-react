{"version":3,"sources":["componets/ProductList/ProductList.jsx","componets/InsertBancnoteForm/InsertBancnoteForm.jsx","componets/ChooseProductForm/ChooseProductForm.jsx","componets/ResultForm/ResultForm.jsx","App.js","serviceWorker.js","index.js"],"names":["NewProductElement","props","className","name","desc","price","id","ProductList","newProductElement","products","map","p","key","InsertBancnoteForm","onSubmit","handleBalanceEnterClick","errorMessageUnknowBancnote","balance","isRichest","onInput","balanceInputValue","disabled","selectedProduct","ChooseProductForm","handleProductEnterClick","errorMessageIncorrect","productInputValue","ResultForm","change","onClick","takeProduct","foundSelectedProduct","App","state","legalPayload","isError","coins","this","find","foundInputSelectedProduct","foundMaxPrice","every","parseInt","e","preventDefault","includes","setState","currentTarget","value","some","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2685e49.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../../App.css';\r\n\r\n\r\nconst NewProductElement = props => {\r\n  return <>\r\n    <li className='product-list__item'>\r\n      <div className='product'>\r\n        <span className='product__name'>{props.name}</span>\r\n        <span className='product__desc'>{props.desc}</span>\r\n        <span className='product__prise'>{props.price + ' R'}</span>\r\n        <span className='product__name'>{props.id}</span>\r\n      </div>\r\n    </li>\r\n  </>\r\n}\r\nconst ProductList = (props) => {\r\n  const newProductElement = props.products.map(p => <NewProductElement id={p.id} key={p.id} name={p.name} price={p.price} desc={p.desc} />)\r\n\r\n  return <div className='interface'>\r\n    <div className='inteface__goods'>\r\n      <ul className='product-list'>\r\n        {newProductElement}\r\n      </ul>\r\n    </div>\r\n  </div>\r\n}\r\nexport default ProductList;","import React from 'react';\r\nimport '../../App.css';\r\n\r\nconst InsertBancnoteForm = props => {\r\n  return <>\r\n    <form onSubmit={props.handleBalanceEnterClick} className='form'>\r\n      <div className='dialog-board'>\r\n        <span>{props.errorMessageUnknowBancnote ? props.errorMessageUnknowBancnote :\r\n          props.balance === 0 ? 'Insert banknotes...' :\r\n            props.isRichest ? `Inserted money: ${props.balance + ' R Enough for any snacks'}` :\r\n              `Inserted money: ${props.balance + ' R'}`}</span>\r\n      </div>\r\n\r\n      <input onInput={props.balanceInputValue} disabled={props.isRichest || props.selectedProduct} />\r\n\r\n      <p className='form__desc'>Available banknotes: 50, 100,\r\n        200, 500 or 1000 R.\r\n        The machine gives change\r\n          in 1, 2, 5 and 10 R coins.</p>\r\n    </form>\r\n  </>\r\n}\r\nexport default InsertBancnoteForm;","import React from 'react';\r\nimport '../../App.css';\r\n\r\nconst ChooseProductForm = props => {\r\n  return <>\r\n    <form onSubmit={props.handleProductEnterClick}>\r\n      <div className='dialog-board'>\r\n        <span>{props.errorMessageIncorrect ? props.errorMessageIncorrect :\r\n          props.balance === 0 ? '>' :\r\n            props.selectedProduct ? 'Success' : 'Choose product'}</span>\r\n      </div>\r\n      <input onInput={props.productInputValue} disabled={props.selectedProduct || props.balance === 0} />\r\n    </form>\r\n  </>\r\n}\r\nexport default ChooseProductForm;","import React from 'react';\r\nimport '../../App.css';\r\n\r\nconst ResultForm = props => {\r\n  return <div>\r\n      <div className='dialog-board'>\r\n\r\n        <span>{props.selectedProduct ? 'Take your product and change' : '>'}</span>\r\n\r\n      </div>\r\n      <div className='conclusion'>\r\n        <div className='product'>\r\n          <span>{props.change ? props.change + ' R' : null} </span>\r\n        </div>\r\n        <div className='product result' onClick={props.takeProduct} >\r\n          <span>{props.selectedProduct ? props.foundSelectedProduct.name : null}</span>\r\n          <span>{props.selectedProduct ? props.foundSelectedProduct.desc : null}</span>\r\n          <span>{props.selectedProduct ? props.foundSelectedProduct.price : null}</span>\r\n          <span>{props.selectedProduct ? props.foundSelectedProduct.id : null}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n}\r\nexport default ResultForm;","import React from 'react';\nimport './App.css';\nimport ProductList from './componets/ProductList/ProductList';\nimport InsertBancnoteForm from './componets/InsertBancnoteForm/InsertBancnoteForm';\nimport ChooseProductForm from './componets/ChooseProductForm/ChooseProductForm';\nimport ResultForm from './componets/ResultForm/ResultForm';\n\nclass App extends React.Component {\n  state = {\n    change: 0,\n    balance: 0,\n    selectedProduct: 0,\n    productInputValue: 0,\n    balanceInputValue: 0,\n    isRichest: false,\n    legalPayload: [50, 100, 200, 500, 1000],\n    errorMessageUnknowBancnote: '',\n    errorMessageIncorrect: '',\n    isError: false,\n    products: [\n      { name: 'Oreo', price: 80, desc: 'Cookie', id: 1 },\n      { name: 'Milka', price: 140, desc: 'Chocolate', id: 2 },\n      { name: 'M&M', price: 200, desc: 'Candy', id: 3 },\n      { name: 'Twix', price: 90, desc: 'Choco bar', id: 4 },\n      { name: 'Mentos', price: 50, desc: 'Chewing pills', id: 5 },\n      { name: 'Mountain dew', price: 170, desc: 'Cold drink', id: 6 },\n    ],\n    coins: []\n  }\n  // componentDidUpdate(prevState) {\n  //   let coins = []\n  //   let money = 57\n  //   let bills = [10, 5, 2, 1]\n  //   let p = 0\n  //   let i = 0\n  //    while (p<this.state.change) {\n  //     let z = Math.floor((this.state.change-p)/bills[i])\n  //       coins.push(z)\n  //       p += bills[i] * z \n  //       i++\n  //       console.log(coins);\n  //    }\n  // }\n\n  render() {\n    const foundSelectedProduct = this.state.products.find(p => p.id === this.state.selectedProduct)\n    const foundInputSelectedProduct = this.state.products.find(p => p.id === this.state.productInputValue)\n    const foundMaxPrice = this.state.products.every(p => p.price <= (parseInt(this.state.balance) + parseInt(this.state.balanceInputValue)))\n\n{/* =========Insert Bancnote Form================ */}\n    const handleBalanceEnterClick = (e) => {\n      e.preventDefault();\n      if (this.state.legalPayload.includes(parseInt(this.state.balanceInputValue))) {\n        this.setState({\n          balance: parseInt(this.state.balanceInputValue) + parseInt(this.state.balance),\n          isRichest: foundMaxPrice,\n          errorMessageUnknowBancnote: '',\n        })\n      } else {\n        this.setState({\n          isError: true,\n          errorMessageUnknowBancnote: 'Unknow bancnote'\n        })\n      }\n    }\n    const balanceInputValue = (e) => {\n      this.setState({\n        balanceInputValue: parseInt(e.currentTarget.value),\n      })\n    }\n{/* =======ChooseProductForm======= */}\n    const handleProductEnterClick = (e) => {\n      e.preventDefault();\n      if (this.state.products.some(p => p.id === this.state.productInputValue) && this.state.balance >= foundInputSelectedProduct.price) {\n        this.setState({\n          selectedProduct: parseInt(this.state.productInputValue),\n          errorMessageIncorrect: '',\n          change: parseInt(this.state.balance) - foundInputSelectedProduct.price\n        })\n      } else if (this.state.products.some(p => p.id === this.state.productInputValue) && this.state.balance < foundInputSelectedProduct.price) {\n        this.setState({\n          isError: true,\n          errorMessageIncorrect: 'Not enought money'\n        })\n      } else {\n        this.setState({\n          isError: true,\n          errorMessageIncorrect: 'Enter correct number'\n        })\n      }\n    }\n    const productInputValue = (e) => {\n      this.setState({\n        productInputValue: parseInt(e.currentTarget.value),\n      })\n    }\n{/* =======ResultForm======= */}\n    const takeProduct = () => {\n      this.setState({\n        change: 0,\n        balance: 0,\n        selectedProduct: 0,\n        productInputValue: 0,\n        balanceInputValue: 0,\n        isRichest: false,\n        legalPayload: [50, 100, 200, 500, 1000],\n        errorMessageUnknowBancnote: '',\n        errorMessageIncorrect: '',\n        isError: false,\n      })\n    }\n    return <div className='interface'>\n      <ProductList products={this.state.products}/>\n      <div className='interface__control-panel'>\n        \n        <InsertBancnoteForm handleBalanceEnterClick={handleBalanceEnterClick} \n        errorMessageUnknowBancnote={this.state.errorMessageUnknowBancnote}\n        balance={this.state.balance}\n        balanceInputValue={balanceInputValue}\n        isRichest={this.state.isRichest} \n        selectedProduct={this.state.selectedProduct}/>\n\n        <ChooseProductForm handleProductEnterClick={handleProductEnterClick} \n        errorMessageIncorrect={this.state.errorMessageIncorrect}\n        balance={this.state.balance}\n        selectedProduct={this.state.selectedProduct}\n        productInputValue={productInputValue}/>\n\n        <ResultForm selectedProduct={this.state.selectedProduct}\n        change={this.state.change}\n        takeProduct={takeProduct}\n        foundSelectedProduct={foundSelectedProduct} />\n      </div>\n    </div>\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}