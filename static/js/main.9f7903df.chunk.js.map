{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","change","balance","selectedProduct","productInputValue","balanceInputValue","legalPayload","errorMessageUnknowBancnote","errorMessageIncorrect","isError","products","name","price","desc","id","coins","bills","p","i","z","Math","floor","push","console","log","foundSelectedProduct","this","find","foundInputSelectedProduct","NewProductElement","props","className","newProductElement","map","key","onSubmit","e","preventDefault","includes","parseInt","setState","onInput","currentTarget","value","disabled","some","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9f7903df.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n  state = {\n    change: 0,\n    balance: 0,\n    selectedProduct: 0,\n\n    productInputValue: 0,\n    balanceInputValue: 0,\n\n    legalPayload: [50, 100, 200, 500, 1000],\n    // correctProductId: [1, 2, 3, 4, 5, 6],\n    errorMessageUnknowBancnote: '',\n    errorMessageIncorrect: '',\n    isError: false,\n    products: [\n      { name: 'Oreo', price: 80, desc: 'Cookie', id: 1 },\n      { name: 'Milka', price: 140, desc: 'Chocolate', id: 2 },\n      { name: 'M&M', price: 200, desc: 'Candy', id: 3 },\n      { name: 'Twix', price: 90, desc: 'Choco bar', id: 4 },\n      { name: 'Mentos', price: 50, desc: 'Chewing pills', id: 5 },\n      { name: 'Mountain dew', price: 170, desc: 'Cold drink', id: 6 },\n    ],\n    coins: []\n  }\n\n  render() {\n    // const counterOfChange = () => {\n      let coins = []\n      let money = 57\n      let bills = [10, 5, 2, 1]\n      let p = 0\n      let i = 0\n       while (p<money) {\n        let z = Math.floor((money-p)/bills[i])\n          coins.push(z)\n          p += bills[i] * z \n          i++\n          console.log(p);\n          console.log(z);\n          console.log(coins);\n       }\n\n\n\n    // }\n    // counterOfChange();\n    \n    // componentDidUpdate(prevProps) {\n    //   // this.setState({\n    //   //   coins: coins\n    //   // })\n    //  }\n\n    //======================================================================\n\n    const foundSelectedProduct = this.state.products.find(p => p.id === this.state.selectedProduct)\n    const foundInputSelectedProduct = this.state.products.find(p => p.id === this.state.productInputValue)\n\n    const handleBalanceEnterClick = (e) => {\n      e.preventDefault();\n      if (this.state.legalPayload.includes(parseInt(this.state.balanceInputValue))) {\n        this.setState({\n          balance: parseInt(this.state.balanceInputValue) + parseInt(this.state.balance),\n          errorMessageUnknowBancnote: '',\n        })\n      } else {\n        this.setState({\n          isError: true,\n          errorMessageUnknowBancnote: 'Unknow bancnote'\n        })\n      }\n    }\n    const balanceInputValue = (e) => {\n      this.setState({\n        balanceInputValue: e.currentTarget.value,\n        // coins: coins\n      })\n    }\n    // console.log(this.state.coins);\n    // console.log(this.state.selectedProduct ? foundInputSelectedProduct.price : null);\n    // console.log(this.state.change);\n\n    const handleProductEnterClick = (e) => {\n      e.preventDefault();\n      if (this.state.products.some(p => p.id === this.state.productInputValue) && this.state.balance >= foundInputSelectedProduct.price) {\n        this.setState({\n          selectedProduct: parseInt(this.state.productInputValue),\n          errorMessageIncorrect: '',\n          change: parseInt(this.state.balance) - foundInputSelectedProduct.price\n        })\n      } else if (this.state.products.some(p => p.id === this.state.productInputValue) && this.state.balance < foundInputSelectedProduct.price) {\n        this.setState({\n          isError: true,\n          errorMessageIncorrect: 'Not enought money'\n        })\n      } else {\n        this.setState({\n          isError: true,\n          errorMessageIncorrect: 'Enter correct number'\n        })\n      }\n    }\n    const productInputValue = (e) => {\n      this.setState({\n        productInputValue: parseInt(e.currentTarget.value)\n      })\n    }\n    const takeProduct = () => {\n      this.setState({\n        balance: 0\n      })\n    }\n\n    const NewProductElement = props => {\n      return <>\n        <li className='product-list__item'>\n            <div className='product'>\n              <span className='product__name'>{props.name}</span>\n              <span className='product__desc'>{props.desc}</span>\n              <span className='product__prise'>{props.price}</span>\n              <span className='product__name'>{props.id}</span>\n            </div>\n          </li>\n      </>\n    }\n    const newProductElement = this.state.products.map( p => <NewProductElement id={p.id} key={p.id} name={p.name} price={p.price} desc={p.desc} /> )\n\n    return <div className='interface'>\n      <div className='inteface__goods'>\n        <ul className='product-list'>\n        {newProductElement}\n        </ul>\n      </div>\n\n      <div className='interface__control-panel'>\n        <form onSubmit={handleBalanceEnterClick} className='form'>\n          <div className='dialog-board'>\n            <span>{this.state.errorMessageUnknowBancnote ? this.state.errorMessageUnknowBancnote : this.state.balance === 0 ? 'Insert banknotes...' : `Inserted money: ${this.state.balance}`}</span>\n          </div>\n\n          <input onInput={balanceInputValue} disabled={this.state.balance > 499 || this.state.selectedProduct} />\n\n          <p className='form__desc'>Available banknotes: 50, 100,\n            200, 500 or 1000 R.\n            The machine gives change\n            in 1, 2, 5 and 10 R coins.</p>\n        </form>\n        <form onSubmit={handleProductEnterClick}>\n          <div className='dialog-board'>\n            <span>{this.state.errorMessageIncorrect ? this.state.errorMessageIncorrect :\n             this.state.balance === 0 ? '>' : \n             this.state.selectedProduct ? 'Success' : 'Choose product'}</span>\n          </div>\n\n\n          <input onInput={productInputValue} disabled={this.state.selectedProduct || this.state.balance === 0} />\n\n\n        </form>\n        <div>\n          <div className='dialog-board'>\n            <span>Take your product and change</span>\n          </div>\n          <div className='conclusion'>\n            <div className='product'>\n              <span>10R <br /> 30 Coins</span>\n            </div>\n            <div className='product' onClick={takeProduct}>\n              <span>{this.state.selectedProduct ? foundSelectedProduct.name : null}</span>\n              <span>{this.state.selectedProduct ? foundSelectedProduct.desc : null}</span>\n              <span>{this.state.selectedProduct ? foundSelectedProduct.price : null}</span>\n              <span>{this.state.selectedProduct ? foundSelectedProduct.id : null}</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}