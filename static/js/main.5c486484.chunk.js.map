{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","balance","products","name","price","desc","id","className","this","onKeyPress","e","setState","currentTarget","value","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yPA2HeA,G,iNArHbC,MAAQ,CACNC,QAAS,EAETC,SAAU,CACR,CAACC,KAAM,OAAUC,MAAO,KAAOC,KAAM,SAAUC,GAAI,KACnD,CAACH,KAAM,QAAUC,MAAO,MAAOC,KAAM,YAAaC,GAAI,KACtD,CAACH,KAAM,MAAUC,MAAO,MAAOC,KAAM,QAASC,GAAI,KAClD,CAACH,KAAM,OAAUC,MAAO,KAAOC,KAAM,YAAaC,GAAI,KACtD,CAACH,KAAM,SAAUC,MAAO,KAAOC,KAAM,gBAAiBC,GAAI,KAC1D,CAACH,KAAM,eAAgBC,MAAO,MAAOC,KAAM,aAAcC,GAAI,O,wEAIvD,IAAD,OAQP,OAAO,yBAAKC,UAAU,aACpB,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,gBACZ,wBAAIA,UAAU,sBACZ,yBAAKA,UAAU,WACb,0BAAMA,UAAU,iBAAhB,QACA,0BAAMA,UAAU,iBAAhB,UACA,0BAAMA,UAAU,kBAAhB,QACA,0BAAMA,UAAU,iBAAhB,OAGJ,wBAAIA,UAAU,sBACZ,yBAAKA,UAAU,WACb,0BAAMA,UAAU,iBAAhB,SACA,0BAAMA,UAAU,iBAAhB,aACA,0BAAMA,UAAU,kBAAhB,SACA,0BAAMA,UAAU,iBAAhB,OAGJ,wBAAIA,UAAU,sBACZ,yBAAKA,UAAU,WACb,0BAAMA,UAAU,iBAAhB,OACA,0BAAMA,UAAU,iBAAhB,SACA,0BAAMA,UAAU,kBAAhB,SACA,0BAAMA,UAAU,iBAAhB,OAGJ,wBAAIA,UAAU,sBACZ,yBAAKA,UAAU,WACb,0BAAMA,UAAU,iBAAhB,QACA,0BAAMA,UAAU,iBAAhB,aACA,0BAAMA,UAAU,kBAAhB,QACA,0BAAMA,UAAU,iBAAhB,OAGJ,wBAAIA,UAAU,sBACZ,yBAAKA,UAAU,WACb,0BAAMA,UAAU,iBAAhB,UACA,0BAAMA,UAAU,iBAAhB,iBACA,0BAAMA,UAAU,kBAAhB,QACA,0BAAMA,UAAU,iBAAhB,OAGJ,wBAAIA,UAAU,sBACZ,yBAAKA,UAAU,WACb,0BAAMA,UAAU,iBAAhB,gBACA,0BAAMA,UAAU,iBAAhB,cACA,0BAAMA,UAAU,kBAAhB,SACA,0BAAMA,UAAU,iBAAhB,SAMR,yBAAKA,UAAU,4BACb,0BAAMA,UAAU,QACd,yBAAKA,UAAU,gBACb,qDACA,8BAAOC,KAAKR,MAAMC,UAGpB,2BAAQQ,WAnEW,SAACC,GACxB,EAAKC,SAAS,CACZV,QAASS,EAAEE,cAAcC,WAmEvB,uBAAGN,UAAU,cAAb,0GAKF,8BACE,yBAAKA,UAAU,gBACb,8BAA8B,IAAvBC,KAAKR,MAAMC,QAAgB,IAAM,mBAE1C,iCAEF,6BACE,yBAAKM,UAAU,gBACb,+DAEF,yBAAKA,UAAU,cACb,yBAAKA,UAAU,WACb,qCAAU,6BAAV,cAEF,yBAAKA,UAAU,WACb,sCACA,sCACA,uCACA,6C,GA7GIO,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5c486484.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n  state = {\n    balance: 0,\n\n    products: [\n      {name: 'Oreo',   price: '80',  desc: 'Cookie', id: '1'},\n      {name: 'Milka',  price: '140', desc: 'Chocolate', id: '2'},\n      {name: 'M&M',    price: '200', desc: 'Candy', id: '3'},\n      {name: 'Twix',   price: '90',  desc: 'Choco bar', id: '4'},\n      {name: 'Mentos', price: '50',  desc: 'Chewing pills', id: '5'},\n      {name: 'Mountain dew', price: '170', desc: 'Cold drink', id: '6'},\n    ]\n  }\n\n  render() {\n\n    const handleEnterClick = (e) => {\n      this.setState({\n        balance: e.currentTarget.value\n      })\n    }\n\n    return <div className='interface'>\n      <div className='inteface__goods'>\n        <ul className='product-list'>\n          <li className='product-list__item'>\n            <div className='product'>\n              <span className='product__name'>Oreo</span>\n              <span className='product__desc'>Cookie</span>\n              <span className='product__prise'>80 R</span>\n              <span className='product__name'>1</span>\n            </div>\n          </li>\n          <li className='product-list__item'>\n            <div className='product'>\n              <span className='product__name'>Milka</span>\n              <span className='product__desc'>Chocolate</span>\n              <span className='product__prise'>140 R</span>\n              <span className='product__name'>2</span>\n            </div>\n          </li>\n          <li className='product-list__item'>\n            <div className='product'>\n              <span className='product__name'>M&M</span>\n              <span className='product__desc'>Candy</span>\n              <span className='product__prise'>200 R</span>\n              <span className='product__name'>3</span>\n            </div>\n          </li>\n          <li className='product-list__item'>\n            <div className='product'>\n              <span className='product__name'>Twix</span>\n              <span className='product__desc'>Choco bar</span>\n              <span className='product__prise'>90 R</span>\n              <span className='product__name'>4</span>\n            </div>\n          </li>\n          <li className='product-list__item'>\n            <div className='product'>\n              <span className='product__name'>Mentos</span>\n              <span className='product__desc'>Chewing pills</span>\n              <span className='product__prise'>50 R</span>\n              <span className='product__name'>5</span>\n            </div>\n          </li>\n          <li className='product-list__item'>\n            <div className='product'>\n              <span className='product__name'>Mountain dew</span>\n              <span className='product__desc'>Cold drink</span>\n              <span className='product__prise'>170 R</span>\n              <span className='product__name'>6</span>\n            </div>\n          </li>\n        </ul>\n      </div>\n      \n      <div className='interface__control-panel'>\n        <form className='form'>\n          <div className='dialog-board'>\n            <span>Insert banknotes...</span>\n            <span>{this.state.balance}</span>\n          </div>\n\n          <input  onKeyPress={handleEnterClick} />\n\n          <p className='form__desc'>Available banknotes: 50, 100,\n            200, 500 or 1000 R.\n            The machine gives change\n            in 1, 2, 5 and 10 R coins.</p>\n        </form>\n        <form>\n          <div className='dialog-board'>\n            <span>{this.state.balance === 0 ? '>' : 'Choose product'}</span>\n          </div>\n          <input />\n        </form>\n        <div>\n          <div className='dialog-board'>\n            <span>Take your product and change</span>\n          </div>\n          <div className='conclusion'>\n            <div className='product'>\n              <span>10R <br/> 30 Coins</span>\n            </div>\n            <div className='product'>\n              <span>name</span>\n              <span>desc</span>\n              <span>price</span>\n              <span>id</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}