{"version":3,"sources":["componets/ProductList/ProductList.jsx","componets/InsertBancnoteForm/InsertBancnoteForm.jsx","componets/ChooseProductForm/ChooseProductForm.jsx","componets/ResultForm/ResultForm.jsx","App.js","serviceWorker.js","index.js"],"names":["NewProductElement","props","className","name","desc","price","id","ProductList","newProductElement","products","map","p","key","InsertBancnoteForm","onSubmit","handleBalanceEnterClick","errorMessageUnknowBancnote","balance","isRichest","ref","balanceInputValueRef","onInput","balanceInputValue","disabled","selectedProduct","ChooseProductForm","handleProductEnterClick","errorMessageIncorrect","productInputValue","productInputValueRef","CoinChange","coins10","coins5","coins2","coins1","ResultForm","coinChange","coins","c","index","change","onClick","takeProduct","foundSelectedProduct","App","state","legalPayload","isError","e","preventDefault","includes","parseInt","setState","every","currentTarget","value","newChange","find","localCoins","bills","i","z","Math","floor","push","some","current","React","createRef","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gQAEMA,G,MAAoB,SAAAC,GAExB,OAAO,oCACL,wBAAIC,UAAU,sBACZ,yBAAKA,UAAU,WACb,0BAAMA,UAAU,iBAAiBD,EAAME,MACvC,0BAAMD,UAAU,iBAAiBD,EAAMG,MACvC,0BAAMF,UAAU,kBAAkBD,EAAMI,MAAQ,MAChD,0BAAMH,UAAU,iBAAiBD,EAAMK,SAgBhCC,EAXK,SAACN,GACnB,IAAMO,EAAoBP,EAAMQ,SAASC,KAAI,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAmBL,GAAIK,EAAEL,GAAIM,IAAKD,EAAEL,GAAIH,KAAMQ,EAAER,KAAME,MAAOM,EAAEN,MAAOD,KAAMO,EAAEP,UAEhI,OAAO,yBAAKF,UAAU,aACpB,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,gBACXM,MCGMK,EAtBY,SAAAZ,GACzB,OAAO,oCACL,0BAAMa,SAAUb,EAAMc,wBAAyBb,UAAU,QACvD,yBAAKA,UAAU,gBACb,8BACGD,EAAMe,2BAA6Bf,EAAMe,2BACtB,IAAlBf,EAAMgB,QAAgB,sBACpBhB,EAAMiB,UAAN,0BAAqCjB,EAAMgB,QAAU,4BAArD,0BACqBhB,EAAMgB,QAAU,QAI7C,2BAAOE,IAAKlB,EAAMmB,qBAAsBC,QAASpB,EAAMqB,kBAAmBC,SAAUtB,EAAMiB,WAAajB,EAAMuB,kBAE7G,uBAAGtB,UAAU,cAAb,4GCASuB,EAdW,SAAAxB,GACxB,OAAO,oCACL,0BAAMa,SAAUb,EAAMyB,yBACpB,yBAAKxB,UAAU,gBACb,8BACGD,EAAM0B,sBAAwB1B,EAAM0B,sBACjB,IAAlB1B,EAAMgB,QAAgB,IACpBhB,EAAMuB,gBAAkB,UAAY,mBAG5C,2BAAOH,QAASpB,EAAM2B,kBAAmBT,IAAKlB,EAAM4B,qBAAsBN,SAAUtB,EAAMuB,iBAAqC,IAAlBvB,EAAMgB,aCVnHa,EAAa,SAAA7B,GACjB,OAAM,oCACHA,EAAM8B,QAAU,sCAAY9B,EAAM8B,QAAlB,UAAyC,KACzD9B,EAAM+B,OAAS,qCAAW/B,EAAM+B,OAAjB,UAAuC,KACtD/B,EAAMgC,OAAS,qCAAWhC,EAAMgC,OAAjB,UAAuC,KACtDhC,EAAMiC,OAAS,qCAAWjC,EAAMiC,OAAjB,UAAuC,OAyB5CC,EAtBI,SAAAlC,GAEjB,IAAMmC,EAAanC,EAAMoC,MAAM3B,KAAI,SAAA4B,GAAC,OAAI,kBAAC,EAAD,CAAY1B,IAAK0B,EAAEC,MAAOR,QAASO,EAAE,IAAKN,OAAQM,EAAE,GAAIL,OAAQK,EAAE,GAAIJ,OAAQI,EAAE,QAExH,OAAO,6BACH,yBAAKpC,UAAU,gBACb,8BAAOD,EAAMuB,gBAAkB,+BAAiC,MAElE,yBAAKtB,UAAU,cACb,yBAAKA,UAAU,WACZkC,GACCnC,EAAMuC,QAAUvC,EAAMuB,gBAAkB,0CAAuB,MAEnE,yBAAKtB,UAAU,iBAAiBuC,QAASxC,EAAMyC,aAC7C,8BAAOzC,EAAMuB,gBAAkBvB,EAAM0C,qBAAqBxC,KAAO,MACjE,8BAAOF,EAAMuB,gBAAkBvB,EAAM0C,qBAAqBvC,KAAO,MACjE,8BAAOH,EAAMuB,gBAAkBvB,EAAM0C,qBAAqBtC,MAAQ,MAClE,8BAAOJ,EAAMuB,gBAAkBvB,EAAM0C,qBAAqBrC,GAAK,UCuH1DsC,E,YArHb,WAAY3C,GAAQ,IAAD,8BACjB,4CAAMA,KAtBR4C,MAAQ,CACNpC,SAAU,CACR,CAAEN,KAAM,OAAgBE,MAAO,GAAKD,KAAM,SAAUE,GAAI,GACxD,CAAEH,KAAM,QAAgBE,MAAO,IAAKD,KAAM,YAAaE,GAAI,GAC3D,CAAEH,KAAM,MAAgBE,MAAO,IAAKD,KAAM,QAASE,GAAI,GACvD,CAAEH,KAAM,OAAgBE,MAAO,GAAKD,KAAM,YAAaE,GAAI,GAC3D,CAAEH,KAAM,SAAgBE,MAAO,GAAKD,KAAM,gBAAiBE,GAAI,GAC/D,CAAEH,KAAM,eAAgBE,MAAO,IAAKD,KAAM,aAAcE,GAAI,IAE9DkC,OAAQ,EACRvB,QAAS,EACTO,gBAAiB,EACjBI,kBAAmB,EACnBN,kBAAmB,EACnBJ,WAAW,EACX4B,aAAc,CAAC,GAAI,IAAK,IAAK,IAAK,KAClC9B,2BAA4B,GAC5BW,sBAAuB,GACvBoB,SAAS,EACTV,MAAO,IAEU,EAMnBtB,wBAA0B,SAACiC,GACzBA,EAAEC,iBACE,EAAKJ,MAAMC,aAAaI,SAASC,SAAS,EAAKN,MAAMvB,oBACvD,EAAK8B,SAAS,CACZnC,QAASkC,SAAS,EAAKN,MAAMvB,mBAAqB6B,SAAS,EAAKN,MAAM5B,SACtEC,UAAW,EAAK2B,MAAMpC,SAAS4C,OAAM,SAAA1C,GAAC,OAAIA,EAAEN,OAAU8C,SAAS,EAAKN,MAAM5B,SAAWkC,SAAS,EAAKN,MAAMvB,sBACzGN,2BAA4B,KAG9B,EAAKoC,SAAS,CACZL,SAAS,EACT/B,2BAA4B,qBAjBf,EAqBnBM,kBAAoB,SAAC0B,GACnB,EAAKI,SAAS,CACZ9B,kBAAmB6B,SAASH,EAAEM,cAAcC,UAvB7B,EA2BnB7B,wBAA0B,SAACsB,GACzBA,EAAEC,iBAQF,IANA,IAAIO,EAAYL,SAAS,EAAKN,MAAM5B,SAAW,EAAK4B,MAAMpC,SAASgD,MAAK,SAAA9C,GAAC,OAAIA,EAAEL,KAAO,EAAKuC,MAAMjB,qBAAmBvB,MAEhHqD,EAAa,GACbC,EAAQ,CAAC,GAAI,EAAG,EAAG,GACnBhD,EAAI,EACJiD,EAAI,EACDjD,EAAI6C,GAAW,CACpB,IAAIK,EAAIC,KAAKC,OAAOP,EAAY7C,GAAKgD,EAAMC,IAC3CF,EAAWM,KAAX,eAAmBL,EAAMC,GAAKC,IAC9BlD,GAAKgD,EAAMC,GAAKC,EAChBD,IAGE,EAAKf,MAAMpC,SAASwD,MAAK,SAAAtD,GAAC,OAAIA,EAAEL,KAAO,EAAKuC,MAAMjB,sBAAsB,EAAKiB,MAAM5B,SAAW,EAAK4B,MAAMpC,SAASgD,MAAK,SAAA9C,GAAC,OAAIA,EAAEL,KAAO,EAAKuC,MAAMjB,qBAAmBvB,MACrK,EAAK+C,SAAS,CACZ5B,gBAAiB2B,SAAS,EAAKN,MAAMjB,mBACrCD,sBAAuB,GACvBU,MAAOqB,EACPlB,OAAQW,SAAS,EAAKN,MAAM5B,SAAW,EAAK4B,MAAMpC,SAASgD,MAAK,SAAA9C,GAAC,OAAIA,EAAEL,KAAO,EAAKuC,MAAMjB,qBAAmBvB,QAErG,EAAKwC,MAAMpC,SAASwD,MAAK,SAAAtD,GAAC,OAAIA,EAAEL,KAAO,EAAKuC,MAAMjB,sBAAsB,EAAKiB,MAAM5B,QAAU,EAAK4B,MAAMpC,SAASgD,MAAK,SAAA9C,GAAC,OAAIA,EAAEL,KAAO,EAAKuC,MAAMjB,qBAAmBvB,MAC3K,EAAK+C,SAAS,CACZL,SAAS,EACTpB,sBAAuB,sBAGzB,EAAKyB,SAAS,CACZL,SAAS,EACTpB,sBAAuB,0BA1DV,EA8DnBC,kBAAoB,SAACoB,GACnB,EAAKI,SAAS,CACZxB,kBAAmBuB,SAASH,EAAEM,cAAcC,UAhE7B,EAoEnBb,YAAc,WACZ,EAAKb,qBAAqBqC,QAAQX,MAAQ,GAC1C,EAAKnC,qBAAqB8C,QAAQX,MAAQ,GAC1C,EAAKH,SAAS,CACZZ,OAAQ,EACRvB,QAAS,EACTO,gBAAiB,EACjBI,kBAAmB,EACnBN,kBAAmB,EACnBJ,WAAW,EACXF,2BAA4B,GAC5BW,sBAAuB,GACvBoB,SAAS,EACTV,MAAO,MA/ET,EAAKR,qBAAuBsC,IAAMC,YAClC,EAAKhD,qBAAuB+C,IAAMC,YAHjB,E,sEAsFT,IAAD,OACDzB,EAAuB0B,KAAKxB,MAAMpC,SAASgD,MAAK,SAAA9C,GAAC,OAAIA,EAAEL,KAAO,EAAKuC,MAAMrB,mBAE/E,OAAO,yBAAKtB,UAAU,aACpB,kBAAC,EAAD,CAAaO,SAAU4D,KAAKxB,MAAMpC,WAElC,yBAAKP,UAAU,4BACb,kBAAC,EAAD,CAAoBa,wBAAyBsD,KAAKtD,wBAChDC,2BAA4BqD,KAAKxB,MAAM7B,2BACvCC,QAASoD,KAAKxB,MAAM5B,QACpBK,kBAAmB+C,KAAK/C,kBACxBJ,UAAWmD,KAAKxB,MAAM3B,UACtBM,gBAAiB6C,KAAKxB,MAAMrB,gBAC5BJ,qBAAsBiD,KAAKjD,uBAE7B,kBAAC,EAAD,CAAmBM,wBAAyB2C,KAAK3C,wBAC/CC,sBAAuB0C,KAAKxB,MAAMlB,sBAClCV,QAASoD,KAAKxB,MAAM5B,QACpBO,gBAAiB6C,KAAKxB,MAAMrB,gBAC5BI,kBAAmByC,KAAKzC,kBACxBC,qBAAsBwC,KAAKxC,uBAE7B,kBAAC,EAAD,CAAYL,gBAAiB6C,KAAKxB,MAAMrB,gBACtCgB,OAAQ6B,KAAKxB,MAAML,OACnBE,YAAa2B,KAAK3B,YAClBC,qBAAsBA,EACtBN,MAAOgC,KAAKxB,MAAMR,c,GAtIV8B,IAAMG,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.049260b7.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst NewProductElement = props => {\r\n\r\n  return <>\r\n    <li className='product-list__item'>\r\n      <div className='product'>\r\n        <span className='product__name'>{props.name}</span>\r\n        <span className='product__desc'>{props.desc}</span>\r\n        <span className='product__prise'>{props.price + ' R'}</span>\r\n        <span className='product__name'>{props.id}</span>\r\n      </div>\r\n    </li>\r\n  </>\r\n}\r\nconst ProductList = (props) => {\r\n  const newProductElement = props.products.map(p => <NewProductElement id={p.id} key={p.id} name={p.name} price={p.price} desc={p.desc} />)\r\n\r\n  return <div className='interface'>\r\n    <div className='inteface__goods'>\r\n      <ul className='product-list'>\r\n        {newProductElement}\r\n      </ul>\r\n    </div>\r\n  </div>\r\n}\r\nexport default ProductList;","import React from 'react';\r\n\r\nconst InsertBancnoteForm = props => {\r\n  return <>\r\n    <form onSubmit={props.handleBalanceEnterClick} className='form'>\r\n      <div className='dialog-board'>\r\n        <span>\r\n          {props.errorMessageUnknowBancnote ? props.errorMessageUnknowBancnote :\r\n            props.balance === 0 ? 'Insert banknotes...' :\r\n              props.isRichest ? `Inserted money: ${props.balance + ' R Enough for any snacks'}` :\r\n                `Inserted money: ${props.balance + ' R'}`}\r\n        </span>\r\n      </div>\r\n\r\n      <input ref={props.balanceInputValueRef} onInput={props.balanceInputValue} disabled={props.isRichest || props.selectedProduct} />\r\n\r\n      <p className='form__desc'>\r\n        Available banknotes: 50, 100,\r\n        200, 500 or 1000 R.\r\n        The machine gives change\r\n        in 1, 2, 5 and 10 R coins.</p>\r\n    </form>\r\n  </>\r\n}\r\nexport default InsertBancnoteForm;","import React from 'react';\r\n\r\nconst ChooseProductForm = props => {\r\n  return <>\r\n    <form onSubmit={props.handleProductEnterClick}>\r\n      <div className='dialog-board'>\r\n        <span>\r\n          {props.errorMessageIncorrect ? props.errorMessageIncorrect :\r\n            props.balance === 0 ? '>' :\r\n              props.selectedProduct ? 'Success' : 'Choose product'}\r\n        </span>\r\n      </div>\r\n      <input onInput={props.productInputValue} ref={props.productInputValueRef} disabled={props.selectedProduct || props.balance === 0} />\r\n    </form>\r\n  </>\r\n}\r\nexport default ChooseProductForm;","import React from 'react';\r\n\r\nconst CoinChange = props => {\r\n  return<>\r\n    {props.coins10 ? <div>10 R: {props.coins10} coins</div> : null}\r\n    {props.coins5 ? <div>5 R: {props.coins5} coins</div> : null}\r\n    {props.coins2 ? <div>2 R: {props.coins2} coins</div> : null}\r\n    {props.coins1 ? <div>1 R: {props.coins1} coins</div> : null}\r\n  </>\r\n}\r\nconst ResultForm = props => {\r\n\r\n  const coinChange = props.coins.map(c => <CoinChange key={c.index} coins10={c[10]} coins5={c[5]} coins2={c[2]} coins1={c[1]} />)\r\n\r\n  return <div>\r\n      <div className='dialog-board'>\r\n        <span>{props.selectedProduct ? 'Take your product and change' : '>'}</span>\r\n      </div>\r\n      <div className='conclusion'>\r\n        <div className='product'>\r\n          {coinChange}\r\n          {!props.change && props.selectedProduct ? <div>No change</div> : null}\r\n        </div>\r\n        <div className='product result' onClick={props.takeProduct} >\r\n          <span>{props.selectedProduct ? props.foundSelectedProduct.name : null}</span>\r\n          <span>{props.selectedProduct ? props.foundSelectedProduct.desc : null}</span>\r\n          <span>{props.selectedProduct ? props.foundSelectedProduct.price : null}</span>\r\n          <span>{props.selectedProduct ? props.foundSelectedProduct.id : null}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n}\r\nexport default ResultForm;","import React from 'react';\nimport './App.css';\nimport ProductList from './componets/ProductList/ProductList';\nimport InsertBancnoteForm from './componets/InsertBancnoteForm/InsertBancnoteForm';\nimport ChooseProductForm from './componets/ChooseProductForm/ChooseProductForm';\nimport ResultForm from './componets/ResultForm/ResultForm';\n\nclass App extends React.Component {\n  state = {\n    products: [\n      { name: 'Oreo',         price: 80,  desc: 'Cookie', id: 1 },\n      { name: 'Milka',        price: 140, desc: 'Chocolate', id: 2 },\n      { name: 'M&M',          price: 200, desc: 'Candy', id: 3 },\n      { name: 'Twix',         price: 91,  desc: 'Choco bar', id: 4 },\n      { name: 'Mentos',       price: 50,  desc: 'Chewing pills', id: 5 },\n      { name: 'Mountain dew', price: 170, desc: 'Cold drink', id: 6 },\n    ],\n    change: 0,\n    balance: 0,\n    selectedProduct: 0,\n    productInputValue: 0,\n    balanceInputValue: 0,\n    isRichest: false,\n    legalPayload: [50, 100, 200, 500, 1000],\n    errorMessageUnknowBancnote: '',\n    errorMessageIncorrect: '',\n    isError: false,\n    coins: []\n  }\n  constructor(props) {\n    super(props);\n    this.productInputValueRef = React.createRef();\n    this.balanceInputValueRef = React.createRef();\n  }\n  // ========= Insert Bancnote Form ================ \n  handleBalanceEnterClick = (e) => {\n    e.preventDefault();\n    if (this.state.legalPayload.includes(parseInt(this.state.balanceInputValue))) {\n      this.setState({\n        balance: parseInt(this.state.balanceInputValue) + parseInt(this.state.balance),\n        isRichest: this.state.products.every(p => p.price <= (parseInt(this.state.balance) + parseInt(this.state.balanceInputValue))),\n        errorMessageUnknowBancnote: '',\n      })\n    } else {\n      this.setState({\n        isError: true,\n        errorMessageUnknowBancnote: 'Unknow bancnote'\n      })\n    }\n  }\n  balanceInputValue = (e) => {\n    this.setState({\n      balanceInputValue: parseInt(e.currentTarget.value),\n    })\n  }\n  // ========= Choose Product Form ========= \n  handleProductEnterClick = (e) => {\n    e.preventDefault();\n\n    let newChange = parseInt(this.state.balance) - this.state.products.find(p => p.id === this.state.productInputValue).price\n\n    let localCoins = []\n    let bills = [10, 5, 2, 1]\n    let p = 0\n    let i = 0\n    while (p < newChange) {\n      let z = Math.floor((newChange - p) / bills[i])\n      localCoins.push({ [bills[i]]: z })\n      p += bills[i] * z\n      i++\n    }\n\n    if (this.state.products.some(p => p.id === this.state.productInputValue) && this.state.balance >= this.state.products.find(p => p.id === this.state.productInputValue).price) {\n      this.setState({\n        selectedProduct: parseInt(this.state.productInputValue),\n        errorMessageIncorrect: '',\n        coins: localCoins,\n        change: parseInt(this.state.balance) - this.state.products.find(p => p.id === this.state.productInputValue).price\n      })\n    } else if (this.state.products.some(p => p.id === this.state.productInputValue) && this.state.balance < this.state.products.find(p => p.id === this.state.productInputValue).price) {\n      this.setState({\n        isError: true,\n        errorMessageIncorrect: 'Not enought money'\n      })\n    } else {\n      this.setState({\n        isError: true,\n        errorMessageIncorrect: 'Enter correct number'\n      })\n    }\n  }\n  productInputValue = (e) => {\n    this.setState({\n      productInputValue: parseInt(e.currentTarget.value),\n    })\n  }\n  // ========= Result Form ========= \n  takeProduct = () => {\n    this.productInputValueRef.current.value = ''\n    this.balanceInputValueRef.current.value = ''\n    this.setState({\n      change: 0,\n      balance: 0,\n      selectedProduct: 0,\n      productInputValue: 0,\n      balanceInputValue: 0,\n      isRichest: false,\n      errorMessageUnknowBancnote: '',\n      errorMessageIncorrect: '',\n      isError: false,\n      coins: []\n    })\n\n  }\n\n  render() {\n    const foundSelectedProduct = this.state.products.find(p => p.id === this.state.selectedProduct)\n\n    return <div className='interface'>\n      <ProductList products={this.state.products} />\n\n      <div className='interface__control-panel'>\n        <InsertBancnoteForm handleBalanceEnterClick={this.handleBalanceEnterClick}\n          errorMessageUnknowBancnote={this.state.errorMessageUnknowBancnote}\n          balance={this.state.balance}\n          balanceInputValue={this.balanceInputValue}\n          isRichest={this.state.isRichest}\n          selectedProduct={this.state.selectedProduct}\n          balanceInputValueRef={this.balanceInputValueRef} />\n\n        <ChooseProductForm handleProductEnterClick={this.handleProductEnterClick}\n          errorMessageIncorrect={this.state.errorMessageIncorrect}\n          balance={this.state.balance}\n          selectedProduct={this.state.selectedProduct}\n          productInputValue={this.productInputValue}\n          productInputValueRef={this.productInputValueRef} />\n\n        <ResultForm selectedProduct={this.state.selectedProduct}\n          change={this.state.change}\n          takeProduct={this.takeProduct}\n          foundSelectedProduct={foundSelectedProduct}\n          coins={this.state.coins} />\n      </div>\n    </div>\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}